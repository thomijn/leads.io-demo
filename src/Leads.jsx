/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 leads.glb 
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useTexture } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import { useControls } from 'leva'
import gsap from 'gsap'
import { LayerMaterial, Depth } from 'lamina'

export function Model(props) {
  const { nodes } = useGLTF('/leads.glb')
  const group = useRef()
  const cubeRefs = useRef([]);
  const { lightBlue, blue, animationSpeed, rotationSpeed, darkerBlue } = useControls({
    lightBlue: '#c4c4ff',
    darkerBlue: '#7878ff',
    blue: '#0000c7',
    rotationSpeed: 0.03,
    animationSpeed: 0.024,
  })

  const [scratchNormalMap, scratchRoughnessMap, SmudgesRoughnessMap] = useTexture([
    '/ScratchesLight001_NRM_1K.jpg',
    '/ScratchesLight001_OVERLAY_VAR1_1K.jpg',
    '/SmudgesLarge001_OVERLAY_VAR1_1K.jpg',
  ])

  useFrame(() => {
    group.current.rotation.y -= rotationSpeed
    group.current.position.y -= animationSpeed


    // if postion y is under -2.5, reset to inital position
    if (group.current.position.y < -6.15) {
      group.current.position.y = 0
      cubeRefs.current.forEach((cube, index) => {
        gsap.fromTo(cube.scale, { x: 0, y: 0, z: 0 }, { x: 1, y: 1, z: 1, duration: 0.6, ease:'linear', delay: index * 0.6 });
      });
    }
  })

  const blueGlassMaterial = new THREE.MeshPhysicalMaterial({
    color: lightBlue,
    metalness: 0.4,
    roughness: 0,
    opacity: 1,
    transmission: 0.8,
    thickness: 1,
    transparent: true,
    roughnessMap: SmudgesRoughnessMap,
    map: SmudgesRoughnessMap,
    envMapIntensity: 2
  })

  const blueGlassMaterialLight = new THREE.MeshPhysicalMaterial({
    color: darkerBlue,
    metalness: 0.1,
    roughness: 0.4,
    opacity: 1,
    transmission: 1,
    thickness: 1,
    transparent: true,
    normalMap: scratchNormalMap,
    roughnessMap: scratchRoughnessMap,
    map: scratchRoughnessMap,
    envMapIntensity: 2
  })

  const blueDenseGlassMaterial = new THREE.MeshPhysicalMaterial({
    color: blue,
    metalness: 0,
    roughness: 0.2,
    opacity: 1,
    transparent: true,
    transmission: 0.1,
    thickness: 1,
    normalMap: scratchNormalMap,
    roughnessMap: scratchRoughnessMap,
    map: scratchRoughnessMap,
    envMapIntensity: 2
  })

  return (
    <group {...props} ref={group} dispose={null}>
      <mesh ref={el => cubeRefs.current[3] = el} geometry={nodes.Cube.geometry} material={props.order ? blueGlassMaterial : blueDenseGlassMaterial} position={[2.05, 2.03, -2.02]} />
      <mesh ref={el => cubeRefs.current[2] = el} geometry={nodes.Cube001.geometry} material={props.order ? blueDenseGlassMaterial : blueGlassMaterial} position={[2.032, 1.018, 2.045]} />
      <mesh ref={el => cubeRefs.current[1] = el} geometry={nodes.Cube002.geometry} material={props.order ? blueGlassMaterialLight : blueDenseGlassMaterial} position={[-2.045, 0.018, 2.032]} />
      <mesh ref={el => cubeRefs.current[0] = el} geometry={nodes.Cube003.geometry} material={props.order ? blueDenseGlassMaterial : blueGlassMaterialLight} position={[-2.05, -0.97, -2.02]} />
    </group>
  )
}

useGLTF.preload('/leads.glb')
